// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `Registrable.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package pt.fcup.generated;

public interface RegistrableI extends com.zeroc.Ice.Object
{
    boolean registerSeeder(String fileHash, String fileName, int fileSize, String protocol, int port, int videoSizeX, int videoSizeY, int bitrate, com.zeroc.Ice.Current current);

    boolean deregisterSeeder(String deregMessage, com.zeroc.Ice.Current current);

    boolean sendHashes(String[] chunkHashes, String fileHash, String seederIP, int seederPort, com.zeroc.Ice.Current current);

    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::generated::RegistrableI"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::generated::RegistrableI";
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_registerSeeder(RegistrableI obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_fileHash;
        String iceP_fileName;
        int iceP_fileSize;
        String iceP_protocol;
        int iceP_port;
        int iceP_videoSizeX;
        int iceP_videoSizeY;
        int iceP_bitrate;
        iceP_fileHash = istr.readString();
        iceP_fileName = istr.readString();
        iceP_fileSize = istr.readInt();
        iceP_protocol = istr.readString();
        iceP_port = istr.readInt();
        iceP_videoSizeX = istr.readInt();
        iceP_videoSizeY = istr.readInt();
        iceP_bitrate = istr.readInt();
        inS.endReadParams();
        boolean ret = obj.registerSeeder(iceP_fileHash, iceP_fileName, iceP_fileSize, iceP_protocol, iceP_port, iceP_videoSizeX, iceP_videoSizeY, iceP_bitrate, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_deregisterSeeder(RegistrableI obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_deregMessage;
        iceP_deregMessage = istr.readString();
        inS.endReadParams();
        boolean ret = obj.deregisterSeeder(iceP_deregMessage, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_sendHashes(RegistrableI obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String[] iceP_chunkHashes;
        String iceP_fileHash;
        String iceP_seederIP;
        int iceP_seederPort;
        iceP_chunkHashes = istr.readStringSeq();
        iceP_fileHash = istr.readString();
        iceP_seederIP = istr.readString();
        iceP_seederPort = istr.readInt();
        inS.endReadParams();
        boolean ret = obj.sendHashes(iceP_chunkHashes, iceP_fileHash, iceP_seederIP, iceP_seederPort, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    final static String[] _iceOps =
    {
        "deregisterSeeder",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "registerSeeder",
        "sendHashes"
    };

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_deregisterSeeder(this, in, current);
            }
            case 1:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 2:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 3:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 4:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 5:
            {
                return _iceD_registerSeeder(this, in, current);
            }
            case 6:
            {
                return _iceD_sendHashes(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
